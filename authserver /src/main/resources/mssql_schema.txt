To convert the provided PostgreSQL schema to Microsoft SQL Server (MSSQL), you need to make several adjustments to account for differences in syntax and data types between the two databases. Below is the translated schema:

```sql
-- Create tables and indexes for spring_session
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'spring_session')
CREATE TABLE spring_session
(
    primary_id            CHAR(36) PRIMARY KEY NOT NULL,
    session_id            CHAR(36) NOT NULL,
    creation_time         BIGINT NOT NULL,
    last_access_time      BIGINT NOT NULL,
    max_inactive_interval INT NOT NULL,
    expiry_time           BIGINT NOT NULL,
    principal_name        VARCHAR(100)
);

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'spring_session_ix1')
CREATE UNIQUE INDEX spring_session_ix1 ON spring_session (session_id);

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'spring_session_ix2')
CREATE INDEX spring_session_ix2 ON spring_session (expiry_time);

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'spring_session_ix3')
CREATE INDEX spring_session_ix3 ON spring_session (principal_name);

-- Session attributes
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'spring_session_attributes')
CREATE TABLE spring_session_attributes
(
    session_primary_id CHAR(36) NOT NULL,
    attribute_name     VARCHAR(200) NOT NULL,
    attribute_bytes    VARBINARY(MAX) NOT NULL,
    PRIMARY KEY (session_primary_id, attribute_name),
    FOREIGN KEY (session_primary_id) REFERENCES spring_session (primary_id)
        ON UPDATE NO ACTION ON DELETE CASCADE
);

-- Users table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'users')
CREATE TABLE users
(
    username VARCHAR(200) NOT NULL PRIMARY KEY,
    password VARCHAR(500) NOT NULL,
    enabled  BIT NOT NULL
);

-- Authorities table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'authorities')
CREATE TABLE authorities
(
    username  VARCHAR(200) NOT NULL,
    authority VARCHAR(50) NOT NULL,
    CONSTRAINT fk_authorities_users FOREIGN KEY (username) REFERENCES users (username),
    CONSTRAINT username_authority UNIQUE (username, authority)
);

-- OAuth2 registered client
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'oauth2_registered_client')
CREATE TABLE oauth2_registered_client
(
    id                            VARCHAR(100) PRIMARY KEY NOT NULL,
    client_id                     VARCHAR(100) NOT NULL,
    client_id_issued_at           DATETIME2 DEFAULT GETDATE() NOT NULL,
    client_secret                 VARCHAR(200) DEFAULT NULL,
    client_secret_expires_at      DATETIME2 DEFAULT NULL,
    client_name                   VARCHAR(200) NOT NULL,
    client_authentication_methods VARCHAR(1000) NOT NULL,
    authorization_grant_types     VARCHAR(1000) NOT NULL,
    redirect_uris                 VARCHAR(1000) DEFAULT NULL,
    post_logout_redirect_uris     VARCHAR(1000) DEFAULT NULL,
    scopes                        VARCHAR(1000) NOT NULL,
    client_settings               VARCHAR(2000) NOT NULL,
    token_settings                VARCHAR(2000) NOT NULL
);

-- OAuth2 authorization consent
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'oauth2_authorization_consent')
CREATE TABLE oauth2_authorization_consent
(
    registered_client_id VARCHAR(100) NOT NULL,
    principal_name       VARCHAR(200) NOT NULL,
    authorities          VARCHAR(1000) NOT NULL,
    PRIMARY KEY (registered_client_id, principal_name)
);

-- OAuth2 authorization
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'oauth2_authorization')
CREATE TABLE oauth2_authorization
(
    id                            VARCHAR(100) PRIMARY KEY NOT NULL,
    registered_client_id          VARCHAR(100) NOT NULL,
    principal_name                VARCHAR(200) NOT NULL,
    authorization_grant_type      VARCHAR(100) NOT NULL,
    authorized_scopes             VARCHAR(1000) DEFAULT NULL,
    attributes                    NVARCHAR(MAX) DEFAULT NULL,
    state                         VARCHAR(500) DEFAULT NULL,
    authorization_code_value      NVARCHAR(MAX) DEFAULT NULL,
    authorization_code_issued_at  DATETIME2 DEFAULT NULL,
    authorization_code_expires_at DATETIME2 DEFAULT NULL,
    authorization_code_metadata   NVARCHAR(MAX) DEFAULT NULL,
    access_token_value            NVARCHAR(MAX) DEFAULT NULL,
    access_token_issued_at        DATETIME2 DEFAULT NULL,
    access_token_expires_at       DATETIME2 DEFAULT NULL,
    access_token_metadata         NVARCHAR(MAX) DEFAULT NULL,
    access_token_type             VARCHAR(100) DEFAULT NULL,
    access_token_scopes           VARCHAR(1000) DEFAULT NULL,
    oidc_id_token_value           NVARCHAR(MAX) DEFAULT NULL,
    oidc_id_token_issued_at       DATETIME2 DEFAULT NULL,
    oidc_id_token_expires_at      DATETIME2 DEFAULT NULL,
    oidc_id_token_metadata        NVARCHAR(MAX) DEFAULT NULL,
    refresh_token_value           NVARCHAR(MAX) DEFAULT NULL,
    refresh_token_issued_at       DATETIME2 DEFAULT NULL,
    refresh_token_expires_at      DATETIME2 DEFAULT NULL,
    refresh_token_metadata        NVARCHAR(MAX) DEFAULT NULL,
    user_code_value               NVARCHAR(MAX) DEFAULT NULL,
    user_code_issued_at           DATETIME2 DEFAULT NULL,
    user_code_expires_at          DATETIME2 DEFAULT NULL,
    user_code_metadata            NVARCHAR(MAX) DEFAULT NULL,
    device_code_value             NVARCHAR(MAX) DEFAULT NULL,
    device_code_issued_at         DATETIME2 DEFAULT NULL,
    device_code_expires_at        DATETIME2 DEFAULT NULL,
    device_code_metadata          NVARCHAR(MAX) DEFAULT NULL
);

-- RSA key pairs
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'rsa_key_pairs')
CREATE TABLE rsa_key_pairs
(
    id          VARCHAR(1000) PRIMARY KEY NOT NULL,
    private_key NVARCHAR(MAX) NOT NULL,
    public_key  NVARCHAR(MAX) NOT NULL,
    created     DATE NOT NULL,
    UNIQUE (id, created)
);
```

### Key Changes:
1. **Data Types**:
   - `character` is replaced with `CHAR`.
   - `character varying` is replaced with `VARCHAR`.
   - `bytea` is replaced with `VARBINARY(MAX)`.
   - `boolean` is replaced with `BIT`.
   - `text` is replaced with `NVARCHAR(MAX)` for large text fields.
   - `timestamp` is replaced with `DATETIME2`.

2. **Syntax**:
   - `CREATE TABLE IF NOT EXISTS` is replaced with `IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'table_name') CREATE TABLE`.
   - `CREATE INDEX IF NOT EXISTS` is replaced with `IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'index_name') CREATE INDEX`.

3. **Default Values**:
   - `DEFAULT CURRENT_TIMESTAMP` is replaced with `DEFAULT GETDATE()`.

4. **Constraints**:
   - `FOREIGN KEY` constraints are specified similarly but with `ON UPDATE NO ACTION ON DELETE CASCADE`.

These changes ensure that the schema is compatible with Microsoft SQL Server while maintaining the same structure and relationships as the original PostgreSQL schema.